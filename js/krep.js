// koffee 0.45.0

/*
000   000  00000000   00000000  00000000 
000  000   000   000  000       000   000
0000000    0000000    0000000   00000000 
000  000   000   000  000       000      
000   000  000   000  00000000  000
 */
var NEWLINE, _, args, childp, colorize, fs, ignoreDir, ignoreFile, karg, klog, klor, kolor, kstr, output, ref, search, slash;

ref = require('kxk'), childp = ref.childp, slash = ref.slash, karg = ref.karg, klog = ref.klog, kstr = ref.kstr, fs = ref.fs, _ = ref._;

kolor = require('./kolor');

klor = require('klor');

args = karg("krep\n    strings   . ? text to search for              . **\n    path      . ? file or folder to search in     . = |.|\n    coffee    . ? search coffeescript files       . = true\n    noon      . ? search noon files               . = true\n    js        . ? search javascript files         . = true\n    json      . ? search json files               . = true  . - J\n    header    . ? print file headers              . = true  . - H\n    recurse   . ? recurse into subdirs            . = true  . - R\n    numbers   . ? prefix with line numbers        . = false . - N\n    regexp    . ? strings are regexp patterns     . = false\n    dot       . ? search dot files                . = false\n    any       . ? search all text files           . = false\n    debug                                         . = false . - D\n\nversion      " + (require(__dirname + "/../package.json").version));

if (args.path === '.' && args.strings.length) {
    if (slash.exists(args.strings[0])) {
        args.path = args.strings.shift();
    } else if (slash.exists(args.strings.slice(-1)[0])) {
        args.path = args.strings.pop();
    }
}

args.path = slash.resolve(args.path);

ignoreFile = function(p) {
    var base, ext;
    base = slash.basename(p);
    ext = slash.ext(p);
    if (slash.win()) {
        if (base[0] === '$') {
            return true;
        }
        if (base === 'desktop.ini') {
            return true;
        }
        if (base.toLowerCase().startsWith('ntuser')) {
            return true;
        }
    }
    if (p === args.path) {
        return false;
    }
    if (base[0] === '.' && !args.dot) {
        return true;
    }
    if (args.any) {
        return false;
    }
    if (args.js && ext === 'js') {
        return false;
    }
    if (args.json && ext === 'json') {
        return false;
    }
    if (args.noon && ext === 'noon') {
        return false;
    }
    if (args.coffee && (ext === 'koffee' || ext === 'coffee')) {
        return false;
    }
    return true;
};

ignoreDir = function(p) {
    var base;
    if (p === args.path) {
        return false;
    }
    base = slash.basename(p);
    if (base[0] === '.') {
        return true;
    }
    if (base === 'node_modules') {
        return true;
    }
    return false;
};

NEWLINE = /\r?\n/;

search = function(paths) {
    var regexp;
    regexp = new RegExp("(" + args.strings.map(function(s) {
        return kstr.escapeRegexp(s);
    }).join('|') + ")", 'g');
    return paths.forEach(function(path) {
        var dir, file, index, j, line, lines, ref1, results, rngs, text;
        if (slash.isDir(path)) {
            dir = slash.resolve(path);
            if (!ignoreDir(dir)) {
                return search(fs.readdirSync(dir).map(function(p) {
                    return slash.join(dir, p);
                }));
            }
        } else if (slash.isText(path)) {
            file = slash.resolve(path);
            if (!ignoreFile(file)) {
                text = slash.readText(file);
                lines = text.split(NEWLINE);
                rngs = klor.dissect(lines, 'coffee');
                results = [];
                for (index = j = 0, ref1 = lines.length; 0 <= ref1 ? j < ref1 : j > ref1; index = 0 <= ref1 ? ++j : --j) {
                    line = lines[index];
                    if (line.search(regexp) >= 0) {
                        results.push(output(rngs[index], index + 1));
                    } else {
                        results.push(void 0);
                    }
                }
                return results;
            }
        }
    });
};

output = function(rngs, number) {
    var c, clrzd, i, j, ref1;
    c = 0;
    clrzd = '';
    if (args.numbers) {
        clrzd += kolor.w2("" + number) + kolor.w1(':');
    }
    for (i = j = 0, ref1 = rngs.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        while (c < rngs[i].start) {
            c++;
            clrzd += ' ';
        }
        clrzd += colorize(rngs[i]);
        c += rngs[i].match.length;
    }
    return console.log(clrzd);
};

colorize = function(chunk) {
    var c, cn, j, len, v;
    if (cn = kolor.map[chunk.value]) {
        if (cn instanceof Array) {
            v = chunk.match;
            for (j = 0, len = cn.length; j < len; j++) {
                c = cn[j];
                v = kolor[c](v);
            }
            return v;
        } else {
            return kolor[cn](chunk.match);
        }
    }
    return chunk.match;
};

if (args.debug) {
    klog('args:', args);
}

search([args.path]);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/krep.coffee
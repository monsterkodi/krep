// koffee 0.45.0

/*
000   000  00000000   00000000  00000000 
000  000   000   000  000       000   000
0000000    0000000    0000000   00000000 
000  000   000   000  000       000      
000   000  000   000  00000000  000
 */
var NEWLINE, _, args, childp, colorize, colormap, fs, ignoreDir, ignoreFile, karg, klog, klor, kolor, kstr, output, ref, search, slash;

ref = require('kxk'), childp = ref.childp, slash = ref.slash, karg = ref.karg, klog = ref.klog, kstr = ref.kstr, fs = ref.fs, _ = ref._;

kolor = require('./kolor');

klor = require('klor');

args = karg("krep\n    strings       . ? text to search for              . **\n    path          . ? file or folder to search in     . = |.|\n    coffee        . ? search coffeescript files       . = true\n    noon          . ? search noon files               . = true\n    js            . ? search javascript files         . = true\n    json          . ? search json files               . = true  . - J\n    recurse       . ? recurse into subdirs            . = true  . - R\n    regexp        . ? strings are regexp patterns     . = false\n    dot           . ? search dot files                . = false\n    any           . ? search all text files           . = false\n    debug                                             . = false . - D\n\nversion      " + (require(__dirname + "/../package.json").version));

if (args.strings.length > 1 && args.path === '.') {
    if (slash.exists(args.strings[0])) {
        args.path = args.strings.shift();
    } else if (slash.exists(args.strings.slice(-1)[0])) {
        args.path = args.strings.pop();
    }
}

ignoreFile = function(p) {
    var base, ext;
    base = slash.basename(p);
    if (slash.win()) {
        if (base[0] === '$') {
            return true;
        }
        if (base === 'desktop.ini') {
            return true;
        }
        if (base.toLowerCase().startsWith('ntuser')) {
            return true;
        }
    }
    if (!args.all) {
        if (base[0] === '.') {
            return true;
        }
        if (args.any) {
            return false;
        }
        ext = slash.ext(p);
        if (!args.js && ext === 'js') {
            return true;
        }
        if (!args.json && ext === 'json') {
            return true;
        }
        if (!args.noon && ext === 'noon') {
            return true;
        }
        if (!args.coffee && (ext === 'koffee' || ext === 'coffee')) {
            return true;
        }
    }
    return false;
};

ignoreDir = function(p) {
    var base;
    if (!args.all) {
        base = slash.basename(p);
        if (base[0] === '.') {
            return true;
        }
        if (base === 'node_modules') {
            return true;
        }
    }
    return false;
};

colormap = {
    'punct': 'w3',
    'punct this': 'b3',
    'punct comment': 'w1',
    'punct comment triple': 'w1',
    'punct regexp start': 'm8',
    'punct regexp end': 'm8',
    'punct regexp': 'm2',
    'punct regexp triple': 'm2',
    'punct semver': 'r2',
    'punct escape regexp': 'm1',
    'punct escape regexp triple': 'm1',
    'punct string single': 'g1',
    'punct string single triple': 'g1',
    'punct string double': 'g2',
    'punct string double triple': 'g2',
    'punct string interpolation start': 'g1',
    'punct string interpolation end': 'g1',
    'punct dictionary': 'y8',
    'punct property': 'y1',
    'punct range': 'b4',
    'punct method': 'r2',
    'punct function': 'r1',
    'punct function tail': ['b6', 'bold', 'B1'],
    'punct function head': ['b6', 'bold', 'B1'],
    'punct function bound tail': ['r5', 'bold', 'R1'],
    'punct function bound head': ['r5', 'bold', 'R1'],
    'punct h1': 'y1',
    'text h1': 'y4',
    'punct h2': 'r1',
    'text h2': 'r4',
    'punct h3': 'b3',
    'text h3': 'b8',
    'punct h4': 'b2',
    'text h4': 'b6',
    'punct h5': 'b1',
    'text h5': 'b5',
    'string single': 'g3',
    'string single triple': 'g3',
    'string double': 'g4',
    'string double triple': 'g4',
    'nil': 'm2',
    'obj': 'y5',
    'text': 'w8',
    'text this': 'b8',
    'text regexp': 'm6',
    'text regexp triple': 'm6',
    'require': 'w3',
    'keyword': 'b8',
    'number': 'b7',
    'number hex': 'c3',
    'number float': 'r7',
    'punct number float': 'r3',
    'semver': 'r5',
    'module this': 'y2',
    'module': 'y6',
    'class': 'y5',
    'property': 'y6',
    'dictionary key': 'y8',
    'punct function call': 'r2',
    'function call this': 'r2',
    'function call': 'r5',
    'function': 'r4',
    'method': 'r6',
    'punct bold': 'b1',
    'text bold': 'b7',
    'text code': 'b8',
    'punct code': 'b1',
    'punct code triple': 'b1',
    'punct meta': 'g1',
    'meta': 'g4',
    'comment': 'w3',
    'comment triple': 'w4',
    'comment header': ['g1', 'G1'],
    'comment triple header': ['g2', 'G2']
};

colorize = function(chunk) {
    var c, cn, j, len, v;
    if (cn = colormap[chunk.value]) {
        if (cn instanceof Array) {
            v = chunk.match;
            for (j = 0, len = cn.length; j < len; j++) {
                c = cn[j];
                v = kolor[c](v);
            }
            return v;
        } else {
            return kolor[cn](chunk.match);
        }
    }
    return chunk.match;
};

output = function(rngs) {
    var c, clrzd, i, j, ref1;
    c = 0;
    clrzd = '';
    for (i = j = 0, ref1 = rngs.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        while (c < rngs[i].start) {
            c++;
            clrzd += ' ';
        }
        clrzd += colorize(rngs[i]);
        c += rngs[i].match.length;
    }
    return console.log(clrzd);
};

NEWLINE = /\r?\n/;

search = function(paths) {
    var regexp;
    regexp = new RegExp("(" + args.strings.map(function(s) {
        return kstr.escapeRegexp(s);
    }).join('|') + ")", 'g');
    return paths.forEach(function(path) {
        var dir, file, index, j, line, lines, ref1, results, rngs, text;
        if (slash.isDir(path)) {
            dir = slash.resolve(path);
            if (!ignoreDir(dir)) {
                return search(fs.readdirSync(dir).map(function(p) {
                    return slash.join(dir, p);
                }));
            }
        } else if (slash.isText(path)) {
            file = slash.resolve(path);
            if (!ignoreFile(file)) {
                text = slash.readText(file);
                lines = text.split(NEWLINE);
                rngs = klor.dissect(lines, 'coffee');
                results = [];
                for (index = j = 0, ref1 = lines.length; 0 <= ref1 ? j < ref1 : j > ref1; index = 0 <= ref1 ? ++j : --j) {
                    line = lines[index];
                    if (line.search(regexp) >= 0) {
                        results.push(output(rngs[index]));
                    } else {
                        results.push(void 0);
                    }
                }
                return results;
            }
        }
    });
};

if (args.debug) {
    klog('args:', args);
}

search([args.path]);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/krep.coffee
// koffee 0.45.0

/*
000   000  00000000   00000000  00000000 
000  000   000   000  000       000   000
0000000    0000000    0000000   00000000 
000  000   000   000  000       000      
000   000  000   000  00000000  000
 */
var NEWLINE, _, args, childp, colorize, colormap, fs, ignoreDir, ignoreFile, karg, klog, klor, kolor, kstr, output, ref, search, slash;

ref = require('kxk'), childp = ref.childp, slash = ref.slash, karg = ref.karg, klog = ref.klog, kstr = ref.kstr, fs = ref.fs, _ = ref._;

kolor = require('./kolor');

klor = require('klor');

args = karg("krep\n    strings       . ? text to search for              . **\n    path          . ? file or folder to search in     . = |.|\n    regexp        . ? strings are regexp patterns     . = false\n    coffee        . ? search coffeescript files       . = true\n    js            . ? search javascript files         . = false \n    dot           . ? search dot files                . = false\n    any           . ? search all text files           . = false\n    recurse       . ? recurse into subdirs            . = true  . - R\n    debug         . ? debug logs                      . = false . - D\n\nversion      " + (require(__dirname + "/../package.json").version));

if (args.strings.length > 1 && args.path === '.') {
    if (slash.exists(args.strings[0])) {
        args.path = args.strings.shift();
    } else if (slash.exists(args.strings.slice(-1)[0])) {
        args.path = args.strings.pop();
    }
}

ignoreFile = function(p) {
    var base;
    base = slash.basename(p);
    if (slash.win()) {
        if (base[0] === '$') {
            return true;
        }
        if (base === 'desktop.ini') {
            return true;
        }
        if (base.toLowerCase().startsWith('ntuser')) {
            return true;
        }
    }
    if (!args.all) {
        if (base[0] === '.') {
            return true;
        }
    }
    return false;
};

ignoreDir = function(p) {
    var base;
    if (!args.all) {
        base = slash.basename(p);
        if (base[0] === '.') {
            return true;
        }
        if (base === 'node_modules') {
            return true;
        }
    }
    return false;
};

colormap = {
    'punct': 'w3',
    'punct comment': 'w2',
    'punct comment triple': 'w2',
    'punct regexp start': 'm8',
    'punct regexp end': 'm8',
    'punct regexp': 'm2',
    'punct semver': 'r2',
    'punct escape regexp': 'm1',
    'punct string single': 'g1',
    'punct string double': 'g2',
    'punct string double triple': 'g2',
    'punct string interpolation start': 'g1',
    'punct string interpolation end': 'g1',
    'punct dictionary': 'y8',
    'punct property': 'y1',
    'punct range': 'b4',
    'punct function': 'r1',
    'punct function tail': 'b4',
    'punct function head': 'b4',
    'string single': 'g4',
    'string double': 'g6',
    'string double triple': 'g6',
    'nil': 'm2',
    'obj': 'y5',
    'text': 'w8',
    'text regexp': 'm6',
    'require': 'w3',
    'keyword': 'b8',
    'number': 'b7',
    'semver': 'r5',
    'module': 'y6',
    'property': 'y6',
    'dictionary key': 'y8',
    'function call': 'r5',
    'function': 'r4',
    'comment': 'w3',
    'comment header': ['g1', 'G1'],
    'comment triple header': ['g2', 'G2']
};

colorize = function(chunk) {
    var c, cn, j, len, v;
    if (cn = colormap[chunk.value]) {
        if (cn instanceof Array) {
            v = chunk.match;
            for (j = 0, len = cn.length; j < len; j++) {
                c = cn[j];
                v = kolor[c](v);
            }
            return v;
        } else {
            return kolor[cn](chunk.match);
        }
    }
    console.log('>>' + chunk.value + '<<');
    return chunk.match;
};

output = function(input, rngs) {
    var c, i, j, line, ref1;
    c = 0;
    line = '';
    for (i = j = 0, ref1 = rngs.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        while (c < rngs[i].start) {
            c++;
            line += ' ';
        }
        line += colorize(rngs[i]);
        c += rngs[i].match.length;
    }
    return console.log(line);
};

NEWLINE = /\r?\n/;

search = function(paths) {
    var regexp;
    regexp = new RegExp("(" + args.strings.map(function(s) {
        return kstr.escapeRegexp(s);
    }).join('|') + ")", 'g');
    return paths.forEach(function(path) {
        var dir, file, index, j, line, lines, ref1, results, rngs, text;
        if (slash.isDir(path)) {
            dir = slash.resolve(path);
            if (!ignoreDir(dir)) {
                return search(fs.readdirSync(dir).map(function(p) {
                    return slash.join(dir, p);
                }));
            }
        } else if (slash.isText(path)) {
            file = slash.resolve(path);
            if (!ignoreFile(file)) {
                text = slash.readText(file);
                lines = text.split(NEWLINE);
                rngs = klor.dissect(lines, 'coffee');
                results = [];
                for (index = j = 0, ref1 = lines.length; 0 <= ref1 ? j < ref1 : j > ref1; index = 0 <= ref1 ? ++j : --j) {
                    line = lines[index];
                    if (line.search(regexp) >= 0) {
                        results.push(output(line, rngs[index]));
                    } else {
                        results.push(void 0);
                    }
                }
                return results;
            }
        }
    });
};

if (args.debug) {
    klog('args:', args);
}

search([args.path]);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/krep.coffee